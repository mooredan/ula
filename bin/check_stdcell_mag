#!/usr/bin/perl -w

use strict;
use Getopt::Std;
use File::Basename;
use Data::Dumper qw(Dumper);
use Verilog::Netlist;

my $scriptname = basename($0);

my $usage = sprintf("Usage: %s -c [cellname]", $scriptname);
# declare the perl command line flags/options we want to allow
my %options=();
getopts("c:h", \%options);

if(defined($options{h})) {
   print "$usage\n";
   exit(1);
}


unless(defined($options{c})) {
   printf STDERR "ERROR: $scriptname: option -c is required\n";
   exit(1);
}

unless(defined($ENV{PROJECT_DIR})) {
   printf STDERR "ERROR: $scriptname: Environment variable \$PROJECT_DIR must be set\n";
   exit(1);
}

my $PROJECT_DIR = $ENV{PROJECT_DIR};
unless (-d $PROJECT_DIR) {
   printf STDERR "ERROR: $scriptname: $PROJECT_DIR is not a directory\n";
   exit(1);
}

my $mag_dir = "$PROJECT_DIR/mag";
unless (-d $mag_dir) {
   printf STDERR "ERROR: $scriptname: $mag_dir is not a directory\n";
   exit(1);
}

my $cellname = $options{c};

my $mag_file = $mag_dir . "/" . $cellname . ".mag";

unless( -r $mag_file ) {
   printf STDERR "ERROR: $scriptname: $cellname: File \"%s\" is not readable\n", $mag_file;
   exit(1);
}

my $errors = 0;

open(FH, "<$mag_file") or die 
    "ERROR: $scriptname: $cellname: Could not open file: %s", $mag_file;


# lists to hold the rectangles
# my @metal1 = ();
# my @metal2 = ();

# Hash of Arrays
my %rects; 

my @ports = ();
my @property_lines = ();

my @label_lls = ();
# 
my $position = 0;
my $lastposition;

while(<FH>) {
   # print;


   if (/^tech\s/) {
      my ($tag, $tech) = split();
      if ($tech ne "amic5n") {
         printf STDERR ("ERROR: $scriptname: $cellname: Input tech of %s is not supported\n", $tech);
         exit(1);
      }
      next;
   }

   if (/^<< .* >>/) {
      # printf "Found this line: $_";
      my @tarray = split();
      my $layer = $tarray[1];
      # printf "layer: %s\n", $layer;

      if ($layer eq "nwell" || $layer eq "metal1" || $layer eq "metal2" ||
          $layer eq "pselect" || $layer eq "nselect" || $layer eq "polysilicon" ||
          $layer =~ /contact/ || $layer =~ /diff/ || $layer =~ /transistor/) {

         while(<FH>) {
            last if (/^<< .* >>/);
            unless(/^rect /) {
               printf STDERR "ERROR: $scriptname: $cellname: This line is not a rect: $_";
               exit;
            }
            my @coords = split();
            if($coords[0] ne "rect") {
               printf STDERR "ERROR: $scriptname: $cellname: Unexpected line:\n%s", $_;
               exit(1);
            }
            shift(@coords);
            
            push( @{$rects{$layer}} , [ @coords ] );

            $lastposition = tell(FH);
         }
         seek FH, $lastposition, 0;
         next;
      }

      if ($layer eq "properties") {
         while(<FH>) {
            last if (/^<< .* >>/);
            chomp();
            push(@property_lines, $_);
            $lastposition = tell(FH);
         }
         seek FH, $lastposition, 0;
         next;
      }

      if ($layer eq "labels") {
         # printf "Now processing << labels >> section\n";
         my $name = "";
         while(<FH>) {
            last if (/^<< .* >>/);
            # print;
            unless(/^port / || /^flabel /) {
               printf STDERR "ERROR: Unexpected line in labels section: $_ \n";
               exit(1);
            }


            if(/^flabel /) {
               my @tarray = split();
               # last element is the name
               $name = pop(@tarray);

               shift(@tarray);
               shift(@tarray);
              
               my $llx = shift(@tarray);
               if ($llx =~ /[a-z]/i) {
                  $llx = shift(@tarray);
               } 
               my $lly = shift(@tarray);
               my $urx = shift(@tarray);
               my $ury = shift(@tarray);

               # printf "name: $name   $llx,$lly   $urx, $ury\n";
               my @ll = ($llx, $lly);
            
               push(@label_lls, [ @ll ]);

               next;
            }

            if (/^port /) {
               my @tarray = split();
               shift(@tarray);
               my $num = shift(@tarray);

               # printf "label: %s is port number: %d\n", $name, $num;
               $ports[$num] = $name;

            }

            # my @coords = split();
            # if($coords[0] ne "rect") {
               # printf STDERR "ERROR: $scriptname: $cellname: unexpected line:\n%s", $_;
               # exit(1);
            # }
            # shift(@coords);
            
            # push( @{$rects{$layer}} , [ @coords ] );
            $lastposition = tell(FH);
         }
         seek FH, $lastposition, 0;
         next;
      }
   }
}
close(FH);


my @layers = keys(%rects);

my %min_x;
my %min_y;
my %max_x;
my %max_y;

foreach my $layer (@layers) {

   my @rect_array = @{ $rects{$layer} };

   # printf "layer: $layer\n";
   # print Dumper @rect_array;

   foreach my $itr (@rect_array) {
      my @rect = @$itr;
      # printf "@rect\n";

      # printf "$rect[0] $rect[1] $rect[2] $rect[3]\n";

      if(defined($min_x{$layer})) {
         if ($rect[0] < $min_x{$layer}) {
            $min_x{$layer} = $rect[0];
         }
      } else {
         $min_x{$layer} = $rect[0];
      }
      
      if(defined($min_y{$layer})) {
         if ($rect[1] < $min_y{$layer}) {
            $min_y{$layer} = $rect[1];
         }
      } else {
         $min_y{$layer} = $rect[1];
      }

      if(defined($max_x{$layer})) {
         if ($rect[2] > $max_x{$layer}) {
            $max_x{$layer} = $rect[2];
         }
      } else {
         $max_x{$layer} = $rect[2];
      }
      
      if(defined($max_y{$layer})) {
         if ($rect[3] > $max_y{$layer}) {
            $max_y{$layer} = $rect[3];
         }
      } else {
         $max_y{$layer} = $rect[3];
      }
   } 
}

unless(grep(/^metal1$/, @layers)) {
   printf STDERR "ERROR: $scriptname: $cellname: No metal1 found in cell\n";
   exit(1);
}

my $width = $max_x{"metal1"} - $min_x{"metal1"};
my $height = $max_y{"metal1"} - $min_y{"metal1"};

$height = $height - 90;
# printf "height: %d\n", $height;

if ($height % 160 != 0) {
   printf STDERR "ERROR: $scriptname: $cellname: Height must be a multiple of 1.6um\n";
   $errors++;
}

if ($height != 1440) {
   printf STDERR "ERROR: $scriptname: $cellname: Height must be 14.4um\n";
   $errors++;
}

# width needs to be a multiple of 1.5um

if ($width % 150 != 0) {
   printf STDERR "ERROR: $scriptname: $cellname: Width must be a multiple of 1.5um\n";
   $errors++;
}


foreach my $layer (@layers) {
   # printf "layer: $layer\n";
   # printf "%d %d %d %d\n", $min_x{$layer},
   #                         $min_y{$layer},
   #                         $max_x{$layer},
   #                         $max_y{$layer};

   if ($layer eq "metal1") {
      my $width = $max_x{$layer} - $min_x{$layer};
    
      if ($min_x{$layer} != 0) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer not aligned to x = 0\n";
         $errors++;
      }
      if ($min_y{$layer} != -45) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer must extend south to -0.45um\n";
         $errors++;
      }
      if ($max_y{$layer} != ($height + 45)) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer must extend north to %.2f\n",
         ($height + 45) / 100;
         $errors++;
      }
   }


   if ($layer eq "nwell") {
      if ($min_x{$layer} != -130) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend west to -1.3 um\n";
         $errors++;
      }
      if ($max_x{$layer} != ($width + 130)) {
          printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend east to %.2f um\n",
          ($width + 130) / 100;
          $errors++;
      }
      if ($max_y{$layer} != ($height + 55)) {
          printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend north to %.2f um\n",
          ($height + 55) / 100;
          $errors++;
      }
   }

   unless($cellname =~ /nwsx/) {
      if ($layer eq "nselect") {
         if ($min_x{$layer} != -10) {
            printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend west to -0.1 um\n";
            $errors++;
         }
         if ($max_x{$layer} != ($width + 10)) {
             printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend east to %.2f um\n",
             ($width + 10) / 100;
             $errors++;
         }
         if ($min_y{$layer} != 0) {
             printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend south to 0.0 um\n";
             $errors++;
         }
      }

      if ($layer eq "pselect") {
         if ($min_x{$layer} != -10) {
            printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend west to -0.1 um\n";
            $errors++;
         }
         if ($max_x{$layer} != ($width + 10)) {
             printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend east to %.2f um\n",
             ($width + 10) / 100;
             $errors++;
         }
         if ($max_y{$layer} != $height) {
             printf STDERR "ERROR: $scriptname: $cellname: $layer needs to extend north to %.2f um\n",
             ($height / 100);
             $errors++;
         }
      }
   }


   if ($layer eq "polysilicon") {
      if ($min_y{$layer} < 30) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend south past 0.30 um\n";
         $errors++;
      }
      if ($max_y{$layer} > $height - 30) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend north past %.2f um\n",
            ($height - 30) / 100;
         $errors++;
      }
      if ($min_x{$layer} < 30) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend west past 0.30 um\n";
         $errors++;
      }
      if ($max_x{$layer} > $width - 30) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend east past %.2f um\n",
            ($width - 30) / 100;
         $errors++;
      }
   }

   if ($layer eq "ndiffusion" || $layer eq "pdiffusion") {
      if ($max_x{$layer} > $width - 45) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend east past %.2f um\n",
            ($width - 45) / 100;
         $errors++;
      }
      if ($min_x{$layer} < 45) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend west past 0.45 um\n";
         $errors++;
      }
      if ($min_y{$layer} < 45) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend south past 0.45 um\n";
         $errors++;
      }
      if ($max_y{$layer} > $height - 45) {
         printf STDERR "ERROR: $scriptname: $cellname: $layer cannot extend north past %.2f um\n",
            ($height - 45) / 100;
         $errors++;
      }
   }

   # these must be contained within the bounding box
   if ($layer =~ /contact/ || $layer =~ /diff/ || $layer =~ /transistor/) {
      if ($min_y{$layer} <= 0 ||
          $max_y{$layer} >= $height ||
          $min_x{$layer} <= 0 ||
          $max_x{$layer} >= $width) {

         printf STDERR "ERROR: $scriptname: $cellname: All rectangles on $layer must be contained within\n";
         $errors++;
      }
   }
}

my $got_verports = 0;
my @verport_names = ();
my %verport_dir;

###############################################################
# check for verilog model, and get the ports
# for later comparison
###############################################################
my $verilog_dir = "$PROJECT_DIR/verilog";
unless (-d $verilog_dir) {
   printf STDERR "ERROR: $scriptname: $verilog_dir is not a directory\n";
   $errors++;
} else {

   my $verilog_file = $verilog_dir . "/" . $cellname . ".v";

   if(! -r $verilog_file ) {
      printf STDERR "ERROR: $scriptname: File \"%s\" is not readable\n", $verilog_file;
      $errors++;
   } else {
   
   
      my $nl = new Verilog::Netlist();
      $nl->read_file(filename=>$verilog_file);
      
      $nl->link();
      $nl->exit_if_error();
      
      my $module = $nl->find_module($cellname);

      if(defined($module)) {
         # print "cellname: $cellname\n";
         my @ports = $module->ports_ordered;

         if(@ports) { 
            $got_verports = 1;
            foreach my $port (@ports) {
               my $name =  $port->name;
               push (@verport_names, $name);
               my $dir = $port->direction;
               if ($dir eq "in") {
                  $verport_dir{$name} = "input";
               }
               if ($dir eq "out") {
                  $verport_dir{$name} = "output";
               }
               if ($dir eq "inout") {
                  $verport_dir{$name} = $dir;
               }
            }
         }
      } else {
         printf STDERR "ERROR: $scriptname: module $cellname not found in file: %s\n", $verilog_file;
         $errors++;
      }
   }
}



###############################################################
# check ports
###############################################################
# Make sure that all label origins are within the bounding box
foreach my $itr (@label_lls) {
   my @coor = @$itr;
   my $x = $coor[0];
   my $y = $coor[1];

   if ($x <= 0 || $y <= 0) {
      printf STDERR "ERROR: $scriptname: $cellname: label at %d,%d is outside of bounding box\n", $x, $y;
      $errors++;
   }
   if ($x >= $width || $y >= $height) {
      printf STDERR "ERROR: $scriptname: $cellname: label at %d,%d is outside of bounding box\n", $x, $y;
      $errors++;
   }
}

# Make sure that the ports are consecutive
for (my $i = 0 ; $i <= $#ports; $i++) {
   unless(defined($ports[$i])) {
      printf STDERR "ERROR: $scriptname: $cellname: ports need to be numbered consecutively starting at index 0\n";
      $errors++;
      last;
   }
}

my $port = pop(@ports);
if ($port ne "vss") {
   printf STDERR "ERROR: $scriptname: $cellname: last port indexed needs to be \"vss\", got \"$port\"\n";
   $errors++;
}
$port = pop(@ports);
if ($port ne "vdd") {
   printf STDERR "ERROR: $scriptname: $cellname: second to last port indexed needs to be \"vdd\", got \"$port\"\n";
   $errors++;
}


if ($got_verports) {
   if ($#ports != $#verport_names) {
      printf STDERR "ERROR: $scriptname: $cellname: .mag file has %d signal ports whereas .v file has %d\n",
      $#ports + 1, $#verport_names + 1;
      $errors++;
   } else {
      # check order
      my $mismatch = 0;
      for(my $i = 0; $i <= $#ports; $i++) {
         if($ports[$i] ne $verport_names[$i]) {
            $mismatch = 1;
         }      
      }
      if ($mismatch) {
         printf STDERR "ERROR: $scriptname: $cellname: There is a port order or name mismatch between the .mag file and the .v file\n";
         $errors++;
      }
   }
}



###################################################################
# Check for required properties
###################################################################
my %property_found = ();

my @props_needed = ("LEFsite", "LEFclass", "LEFsymmetry");

foreach my $property (@props_needed) {
   $property_found{$property} = 0;
}

foreach my $property_line (@property_lines) {
   my @tarray = split(/\s+/, $property_line);
   my $property = $tarray[1];
   $property_found{$property} = 1;
}

foreach my $property (@props_needed) {
   if ($property_found{$property} != 1) {
      printf STDERR "ERROR: $scriptname: $cellname: no %s property found\n", $property;
      $errors++;
   }
}


# print Dumper @label_lls;
# print Dumper @ports;

if ($errors != 0) {
   exit(1);
}
exit(0);
